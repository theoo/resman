= javascript_include_tag('raphael-min')
= javascript_include_tag('grid')

.month_browser
  - (6).downto(1) do |i|
    %span{:style => "opacity: 0.#{10 - i};"}
      = link_to (@start - i.month).strftime('%b'), :action => 'planning', :start_date => (@start - i.month).to_s(:formatted)
  %span
    = @start.strftime("%B")
  - (1).upto(6) do |i|
    %span{:style => "opacity: 0.#{10 - i};"}
      = link_to (@start + i.month).strftime('%b'), :action => 'planning', :start_date => (@start + i.month).to_s(:formatted)
Show names: #{check_box_tag '', 1, params[:show_names], :onclick => "window.location = #{js_str(url_for(:action => 'planning', :start_date => params[:start_date], :show_names => !params[:show_names]))}"}
%br/
%br/

- raise ArgumentError, items_string.inspect

#tableContainer.tableContainer
  :javascript
    function element_clicked(event, element, properties)
    {
    if(properties.type != 'block' || !properties.reservation_id)
    return;
    window.location = #{js_str(reservations_path)} + '/' + properties.reservation_id;
    }

    var currently_reserving = false;
    var selector = null;
    var orig_x = null;
    function element_mousedown(event, element, properties)
    {
    if(properties.type != 'block' || !properties.reservable)
    return;
    currently_reserving = true;
    var offsets = $('tableContainer').cumulativeOffset();
    orig_x = Math.floor((event.pointerX() - offsets[0]) / tile_size);
    var y = Math.floor((event.pointerY() - offsets[1]) / tile_size);
    selector = grid.add_item({ type: 'block', rect: [orig_x, y, 0, 1], color: 'orange' });
    }

    function element_mousemove(event, element, properties)
    {
    if(properties.type != 'block' || !currently_reserving)
    return;
    var offsets = $('tableContainer').cumulativeOffset();
    var x = (event.pointerX() - offsets[0]);
    x -= x % grid.tile_size;
    x += grid.tile_size;
    selector.animate({width: x - (orig_x * grid.tile_size)}, 0);
    }

    var rooms = [#{@planning.map{|h| js_str(h[:room].name) }.join(',')}];
    function element_mouseup(event, element, properties)
    {
    if(properties.type != 'block')
    return;
    var start = new Date(#{js_str(@start.to_s(:formatted))}.split('/').reverse().join('/'));
    var offsets = $('tableContainer').cumulativeOffset();
    var x = Math.floor((event.pointerX() - offsets[0]) / tile_size);
    var y = Math.floor((event.pointerY() - offsets[1]) / tile_size);
    var arr = date_add(start, orig_x - rooms_offset);
    var dep = date_add(start, x - rooms_offset + 1);
    if(dep < arr)
    return;
    var room = rooms[y-dates_offset];
    window.location = #{js_str(reservations_path)} + "/new?arrival=" + ruby_date(arr) + "&departure=" + ruby_date(dep) + "&room=" + room;
    }

    function date_add(date, days)
    {
    var d = new Date(date);
    d.setDate(d.getDate() + days);
    return d;
    }

    function ruby_date(d)
    {
    return d.getDate() + '/' + (d.getMonth() + 1) + '/' + d.getFullYear();
    }

    var tile_size = 12.8;
    var rooms_offset = 4;
    var dates_offset = 2;
    var items = [
      #{items_string}
    ];

    grid = new Grid('tableContainer', rooms_offset + #{@duration}, dates_offset + #{@planning.size}, tile_size);
    grid.set_handlers({click: element_clicked, mousedown: element_mousedown, mousemove: element_mousemove, mouseup: element_mouseup});
    grid.add_items(items);
