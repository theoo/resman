.edit
  = error_messages_for(@reservation)

  %p
    = f.label :resident_full_name, 'Resident' , :class => :required

    - if action_name == 'edit'
      %span
        = @reservation.resident.full_name
    - else
      %span= f.autocomplete_field :resident_full_name, autocomplete_name_residents_path
      (tip: last name, first name)

    %p
      = f.label :status, {}, :class => :required
      %span
        = f.select :status, Reservation::Status.map{ |s| [s.humanize, s] }

    %p
      = f.label :arrival, {}, :class => :required
      %span
        = text_field_tag 'reservation[arrival_formatted]', @reservation.arrival_formatted,
          { :id => 'reservation_arrival_formatted', :onchange => "dates_changed()", class: 'datepicker' }

    %p
      = f.label :departure, {}, :class => :required
      %span
        = text_field_tag 'reservation[departure_formatted]', @reservation.departure_formatted,
        { :id => 'reservation_departure_formatted', :onchange => "dates_changed()", class: 'datepicker' }

    %p
      = f.label :room, {}, :class => :required
      - if %w{new create}.include?(action_name)
        - rooms   = Room.available_rooms(@reservation.arrival, @reservation.departure, @reservation.room)
        - options = rooms.map{ |room| [room.name, room.id] }
        - options = [['None available', 0]] if options.empty?
        %span
          = f.select(:room_id, options, {}, { onchange: "$('spinner').show(); new Ajax.Request('#{ajax_room_options_reservations_path}', {asynchronous:true, evalScripts:true, method:'get', onComplete:function(request){$('spinner').hide();}, parameters:Form.Element.serialize(this) + '&arrival=' + $('reservation_arrival_formatted').value+ '&departure=' + $('reservation_departure_formatted').value + '&authenticity_token=' + encodeURIComponent(rails_authenticity_token)})" } )

          %span#room_total{:style => "display:inline"}
          = image_tag('spin.gif', :class => 'spinner', :id => 'spinner', :style => 'display:none;')
      - else
        %span
          = f.hidden_field :room_id
          = h @reservation.room
      %script
        - if %w(new create).include?(action_name)
          document.observe("dom:loaded", function(){ $('reservation_room_id').onchange(); });

        function dates_changed()
        {
        - if %w(new create).include?(action_name)
          var arrival   = $('reservation_arrival_formatted').value;
          var departure = $('reservation_departure_formatted').value;
          if (arrival.length > 0 && departure.length > 0)
          {
          var selected_room_id = jQuery('#reservation_room_id option:selected').val();
          var reservation_id = '#{@reservation.id}';
          new Ajax.Updater('reservation_room_id', '#{url_for(:action => :ajax_room_availables)}', {
          asynchronous:true,
          evalScripts:true,
          insertion: "bottom",
          method: 'get',
          parameters: {
          format: 'js',
          arrival: arrival,
          departure: departure,
          selected_room_id: selected_room_id,
          reservation_id: reservation_id,
          authenticity_token: encodeURIComponent(rails_authenticity_token)
          },
          onCreate: function(response) { Element.show('spinner') },
          onComplete: function(response) { Element.hide('spinner') }
          });
          }
        }
    - if %w{new create}.include?(action_name)
      %p
        = f.label :rules
        %ul#rules
    %p
      = f.label :options
      %ul#options
        - # TODO make this DRY with a partial (in ajax_room_options too)
        - if %w{edit update}.include?(action_name)
          - @reservation.room.options.each do |option|
            - checked = @reservation.options.find_by_id(option.id) ? true : false
            - checkbox = check_box_tag('reservation[options_attributes][][room_option_id]', option.id, checked)
            = content_tag('li',  "#{checkbox} #{option}")
